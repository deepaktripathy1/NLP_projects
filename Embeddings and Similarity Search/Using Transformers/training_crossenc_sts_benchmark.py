# -*- coding: utf-8 -*-
"""training_crossenc_sts_benchmark.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GzqlS7fglF9whorL-XLR8zzyY7Pvy-KM
"""

!pip install sentence-transformers

from torch.utils.data import DataLoader
import math
from sentence_transformers import util
from sentence_transformers.cross_encoder import CrossEncoder
from sentence_transformers.cross_encoder.evaluation import CECorrelationEvaluator
from sentence_transformers import InputExample
from datetime import datetime
import sys
import os
import gzip
import csv

sts_dataset_path = 'datasets/stsbenchmark.tsv.gz'

if not os.path.exists(sts_dataset_path):
  util.http_get('https://sbert.net/datasets/stsbenchmark.tsv.gz',
                sts_dataset_path)

# Define cross encoder
train_batch_size = 16
num_epochs = 4
model_save_path = 'output/training_stsbenchmark-'+datetime.now().strftime("%Y-%m-%d_%H-%M-%S")

#We use distilroberta-base as base model and set num_labels=1, which predicts a continous score between 0 and 1
model = CrossEncoder('distilroberta-base', num_labels=1)

# Read STSb dataset

train_samples = []
dev_samples = []
test_samples = []

with gzip.open(sts_dataset_path,'rt',encoding='utf8') as f:
  reader = csv.DictReader(f,delimiter='\t', quoting = csv.QUOTE_NONE)
  for row in reader:
    score = float(row['score'])/5.0 # Normalize score

    if row['split'] == 'dev':
      dev_samples.append(InputExample(texts=[row['sentence1'],row['sentence2']],label=score))
    elif row['split'] == 'test':
      test_samples.append(InputExample(texts=[row['sentence1'],row['sentence2']],label=score))
    else:
       #As we want to get symmetric scores, i.e. CrossEncoder(A,B) = CrossEncoder(B,A), we pass both combinations to the train set
       train_samples.append(InputExample(texts=[row['sentence1'],row['sentence2']],label=score))

# We wrap train_samples (which is a List[InputExample]) into a pytorch DataLoader
train_dataloader = DataLoader(train_samples,shuffle=True,batch_size=train_batch_size)

# We add an evaluator, which evaluates the performance during training
evaluator = CECorrelationEvaluator.from_input_examples(dev_samples,name='sts-dev')

# Configure the training
warmup_steps = math.ceil(len(train_dataloader) * num_epochs * 0.1) #10% of train data for warm-up

# Train the model
model.fit(train_dataloader=train_dataloader,
          evaluator = evaluator,
          epochs = num_epochs,
          warmup_steps = warmup_steps,
          output_path = model_save_path)

##### Load model and eval on test set
model = CrossEncoder(model_save_path)

evaluator = CECorrelationEvaluator.from_input_examples(test_samples,name='sts-test')
evaluator(model)

