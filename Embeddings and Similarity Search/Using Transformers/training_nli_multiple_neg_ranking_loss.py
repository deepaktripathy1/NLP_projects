# -*- coding: utf-8 -*-
"""training_nli_multiple_neg_ranking_loss.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BbI96SRMzpH2oFgIbDo5WO0-C-rWU0am

The system trains BERT (or any other transformer model like RoBERTa, DistilBERT etc.) on the SNLI + MultiNLI (AllNLI) dataset
with MultipleNegativesRankingLoss. Entailnments are poisitive pairs and the contradiction on AllNLI dataset is added as a hard negative.
At every 10% training steps, the model is evaluated on the STS benchmark dataset
"""

!pip install sentence-transformers

from sentence_transformers import SentenceTransformer, util
from sentence_transformers import models, losses, datasets
from sentence_transformers import LoggingHandler, InputExample
from sentence_transformers.evaluation import EmbeddingSimilarityEvaluator
from torch.utils.data import DataLoader
import math
import random
import logging
from datetime import datetime
import os
import gzip
import csv

#Check if dataset exsist. If not, download and extract  it
nli_dataset_path = 'data/AllNLI.tsv.gz'
sts_dataset_path = 'data/stsbenchmark.tsv.gz'

if not os.path.exists(nli_dataset_path):
  util.http_get('https://sbert.net/datasets/AllNLI.tsv.gz', nli_dataset_path)

if not os.path.exists(sts_dataset_path):
  util.http_get('https://sbert.net/datasets/stsbenchmark.tsv.gz', sts_dataset_path)

def add_to_samples(sent1,sent2,label):
  if sent1 not in train_data:
    train_data[sent1] = {'contradiction':set(),'entailment':set(),'neutral':set()}
  train_data[sent1][label].add(sent2)

train_data = {}
with gzip.open(nli_dataset_path,'rt',encoding='utf8') as f:
  reader = csv.DictReader(f,delimiter ='\t',quoting=csv.QUOTE_NONE)
  for row in reader:
    if row['split'] =='train':
      sent1 = row['sentence1'].strip()
      sent2 = row['sentence2'].strip()

      add_to_samples(sent1,sent2,row['label'])
      add_to_samples(sent2,sent1,row['label']) # add the opposite

train_data

model_name = "distilroberta-base"
train_batch_size = 128          #The larger you select this, the better the results (usually). But it requires more GPU memory
max_seq_length = 75
num_epochs = 3

# Save path of model
model_path = 'output/training_nli'

# Here we define our SentenceTransformer model
word_embedding_model = models.Transformer(model_name,max_seq_length=max_seq_length)
pooling_model = models.Pooling(word_embedding_model.get_word_embedding_dimension(),pooling_mode='mean')
model = SentenceTransformer(modules=[word_embedding_model,pooling_model])

train_samples = []
for sent1,others in train_data.items():
  if len(others['entailment']) > 0 and len(others['contradiction']) > 0:
    train_samples.append(InputExample(texts =[sent1,random.choice(list(others['entailment'])),random.choice(list(others['contradiction']))]))
    train_samples.append(InputExample(texts=[random.choice(list(others['entailment'])),sent1,random.choice(list(others['contradiction']))]))

# Special data loader that avoid duplicates within a batch
train_dataloader = datasets.NoDuplicatesDataLoader(train_samples[:40000],batch_size=train_batch_size)

# training loss
train_loss = losses.MultipleNegativesRankingLoss(model)

dev_samples = []
with gzip.open(sts_dataset_path,'rt',encoding='utf8') as f:
  reader = csv.DictReader(f,delimiter='\t',quoting=csv.QUOTE_NONE)
  for row in reader:
    if row['split'] == 'dev':
      score = float(row['score'])/5.0
      dev_samples.append(InputExample(texts=[row['sentence1'],row['sentence2']],label=score))

dev_evaluator = EmbeddingSimilarityEvaluator.from_input_examples(dev_samples,batch_size=train_batch_size,name='sts-dev')

# Configure the training
warmup_steps = math.ceil(len(train_dataloader) * num_epochs * 0.1)

# Train model
model.fit(train_objectives = [(train_dataloader,train_loss)],
          evaluator = dev_evaluator,
          epochs=num_epochs,
          evaluation_steps = int(len(train_dataloader)*0.1),
          warmup_steps = warmup_steps,
          output_path = model_path,
          use_amp=False #Set to True, if your GPU supports FP16 operations
          )

# Load the stored model and evaluate its performance on STS benchmark dataset

test_samples = []
with gzip.open(sts_dataset_path, 'rt', encoding='utf8') as fIn:
    reader = csv.DictReader(fIn, delimiter='\t', quoting=csv.QUOTE_NONE)
    for row in reader:
        if row['split'] == 'test':
            score = float(row['score']) / 5.0 #Normalize score to range 0 ... 1
            test_samples.append(InputExample(texts=[row['sentence1'], row['sentence2']], label=score))

model = SentenceTransformer(model_path)
test_evaluator = EmbeddingSimilarityEvaluator.from_input_examples(test_samples, batch_size=train_batch_size, name='sts-test')
test_evaluator(model, output_path=model_path)